local Character = {}  
 
function Character:Start()  
	BuyerKeys = Character.GetModule("SpecialKeys")	 
	LithiumUI = Character.GetModule("LithiumUI")  
	FOV = Character.GetModule("FOV")  
	 
	if BuyerKeys:IsSpecialKey() then 
		LithiumUI.fallAnimLabel.LabelFrame.TextLabel.Text = "make character underground" 
		 
		undergroundAnimTrack.AnimationId = "http://www.roblox.com/asset/?id=15549124879"  
		animTimeout = 4 
		 
		LithiumUI.undergroundResolverLabel = LithiumUI.combatMisc:MakeLabel({Name = "underground anti resolver", Risky = true}) 
		LithiumUI.undergroundTimeoutLabel = LithiumUI.combatMisc:MakeLabel({Name = "resolver timeout", Risky = true}) 
		LithiumUI.undergroundTimeout = LithiumUI.combatMisc:MakeSlider({Min = 0.1, Max = 2, Inc = 0.1, Def = 0.5, ID = "resolver timeout"}) 
 
		LithiumUI.undergroundHeightLabel = LithiumUI.combatMisc:MakeLabel({Name = "resolver depth", Risky = true}) 
		LithiumUI.undergroundHeight = LithiumUI.combatMisc:MakeSlider({Min = -100, Max = 0, Def = 30, ID = "resolver depth"}) 
 
		LithiumUI.undergroundResolverKeybind = LithiumUI.undergroundResolverLabel:MakeKeybind({ID = "underground resolver"}) 
 
		LithiumUI.undergroundResolverKeybind.KeyPressed = function()  
			local target = FOV.FovTarget  
 
			if not(target) then  
				return  
			end  
 
			if not(Character.jumpTarget) then  
				local originPos = Player.Character:GetPivot()  
				local originalTriggerbot = LithiumUI.triggerbot.Value 
				local originalCheckVisible = LithiumUI.fovCheckVisible.Value 
 
				Character.jumpTarget = target  
				Character.jumpPos = Player.Character:GetPivot().Position + Vector3.new(0, LithiumUI.undergroundHeight.Value, 0)  
				 
				 
				LithiumUI.triggerbot:Toggle(true)  
				LithiumUI.fovCheckVisible:Toggle(false) 
 
				task.delay(LithiumUI.undergroundTimeout.Value, function()  
					Character.jumpTarget = nil  
					Character.jumpPos = nil  
 
					task.wait()  
 
					Player.Character:PivotTo(originPos * CFrame.new(0, 3, 0))  
					LithiumUI.triggerbot:Toggle(originalTriggerbot)  
					LithiumUI.fovCheckVisible:Toggle(originalCheckVisible) 
 
					originPos = nil  
					originalTriggerbot = nil 
					originalCheckVisible = false 
 
					task.wait(0.5)  
 
					Player.Character.Humanoid.Sit = false  
				end)  
			end  
 
			target = nil  
		end 
	end 
 
	LithiumUI.jumpToTarget.KeyPressed = function()  
		local target = FOV.FovTarget  
 
		if not(target) then  
			return  
		end  
 
		if not(LithiumUI.jumpTarget) then  
			local originPos = Player.Character:GetPivot()  
			local originalTriggerbot = LithiumUI.triggerbot.Value  
			local jumpPos = (target.Object:GetPivot() * CFrame.new(0, 50, 0)).Position  
 
			Character.jumpTarget = target  
			Character.jumpPos = jumpPos  
 
			LithiumUI.triggerbot:Toggle(true)  
 
			task.delay(LithiumUI.jumpTimeout.Value, function()  
				Character.jumpTarget = nil  
 
				task.wait()  
 
				Player.Character:PivotTo(originPos)  
				LithiumUI.triggerbot:Toggle(originalTriggerbot)  
 
				originPos = nil  
				originalTriggerbot = nil  
 
				task.wait(0.5)  
 
				Player.Character.Humanoid.Sit = false  
			end)  
		end  
 
		target = nil  
	end  
 
	LithiumUI.peekKeybind.KeyPressed = function()  
		local target = FOV.FovTarget  
 
		if not(target) then  
			return  
		end  
 
		if not(Character.jumpTarget) then  
			local originPos = Player.Character:GetPivot()  
			local originalTriggerbot = LithiumUI.triggerbot.Value  
 
			Character.jumpTarget = target  
			Character.jumpPos = Player.Character:GetPivot().Position + Vector3.new(0, LithiumUI.peekHeight.Value, 0)  
 
			LithiumUI.triggerbot:Toggle(true)  
 
			task.delay(LithiumUI.peekTimeout.Value, function()  
				Character.jumpTarget = nil  
				Character.jumpPos = nil  
 
				task.wait()  
 
				Player.Character:PivotTo(originPos * CFrame.new(0, 3, 0))  
				LithiumUI.triggerbot:Toggle(originalTriggerbot)  
 
				originPos = nil  
				originalTriggerbot = nil  
 
				task.wait(0.5)  
 
				Player.Character.Humanoid.Sit = false  
			end)  
		end  
 
		target = nil  
	end 
 
	LithiumUI.cframeControllerEnabled.Callback = function(value)  
		if value then  
			currentPos = Player.Character:GetPivot().Position  
		end  
	end  
 
	LithiumUI.fly.Callback = function(value)  
		if not(value) and LithiumUI.cframeControllerEnabled.Value then  
			currentPos = Player.Character:GetPivot().Position  
		end  
	end  
 
	Player.CharacterAdded:Wait()  
 
	Character:hookchar(Player.Character)  
end  
 
function Character:CharacterAdded(targetPlayer, targetCharacter)  
	if targetPlayer == Player then  
		Character.isHooked = true 
 

		 
		undergroundAnim = nil 
	end  
end  
 
function Character:PreRender(delta)  
	if Player.Character then  
		if LithiumUI.cframeControllerEnabled.Value and Player.Character:GetPivot().Position.Y >= -200 then  
			Player.Character.Humanoid.PlatformStand = not(LithiumUI.fly.Value)  
 
			for _, part in Player.Character:GetDescendants() do  
				if not(part:IsA("BasePart")) then  
					continue  
				end  
 
				part.CanCollide = false  
				part.CanQuery = false  
			end  
 
			local getKeys = UserInputService:GetKeysPressed()  
 
			local inputs = {  
				v = 0, h = 0, j = 0, f = 0  
			}  
 
			for _, key in getKeys do  
				if key.KeyCode == Enum.KeyCode.W then  
					inputs.v -= 1  
				end  
 
				if key.KeyCode == Enum.KeyCode.A then  
					inputs.h -= 1  
				end  
 
				if key.KeyCode == Enum.KeyCode.S then  
					inputs.v += 1  
				end  
 
				if key.KeyCode == Enum.KeyCode.D then  
					inputs.h += 1  
				end  
 
				if key.KeyCode == Enum.KeyCode.LeftControl then  
					inputs.f -= LithiumUI.fly.Value and 1 or 0  
				end  
 
				if key.KeyCode == Enum.KeyCode.Space then  
					inputs.j += 1  
					inputs.f += LithiumUI.fly.Value and 1 or 0  
				end  
 
				key = nil  
			end  
 
			if not lastWalkspeed then  
				lastWalkspeed = Player.Character.Humanoid.WalkSpeed  
			end  
 
			Player.Character.Humanoid.WalkSpeed = 0  
 
			rayParams.FilterDescendantsInstances = {Player.Character}  
 
			local look = LithiumUI.fly.Value and Camera.CFrame.LookVector or Vector3.new(Camera.CFrame.LookVector.X * 100000, 0, Camera.CFrame.LookVector.Z * 100000).Unit  
			local right = Vector3.new(Camera.CFrame.RightVector.X * 100000, 0, Camera.CFrame.RightVector.Z * 100000).Unit  
 
			local moveDir = (look * -inputs.v + right * inputs.h + Camera.CFrame.UpVector * inputs.f).Unit * (LithiumUI.fly.Value and LithiumUI.vflySpeed.Value or LithiumUI.cframeControllerSpeed.Value) * delta  
 
			if tostring(moveDir.Magnitude) == "nan" then  
				moveDir = Vector3.new(0, 0, 0)  
			end  
 
			if (Player.Character.PrimaryPart.Position - currentPos).Magnitude >= 5 and not(LithiumUI.fly.Value) then  
				currentPos = Player.Character.PrimaryPart.Position + Vector3.new(0, 2, 0)  
			end  
 
			if not(LithiumUI.fly.Value) then  
				local ground = workspace:Blockcast(CFrame.new(currentPos), Vector3.new(2, 0.1, 1.3), Vector3.new(0, -3.1 - math.abs(vertical * delta), 0), rayParams)  
				local ceil = workspace:Raycast(currentPos + Vector3.new(1.5), Vector3.new(0, 0.5 + math.abs(vertical * delta), 0), rayParams)			  
 
				if ceil then  
					vertical = 0  
 
					currentPos -= Vector3.new(0, 0.5 - ceil.Distance, 0)  
				end  
 
				if ground then  
					if inputs.j == 1 then  
						vertical = LithiumUI.jumpHeight.Value  
 
						currentPos += Vector3.new(0, 0.2, 0)  
					else  
						currentPos += Vector3.new(0, (3 - ground.Distance), 0)  
					end  
				end  
 
				if not(ground) then  
					vertical -= 50 * delta  
 
					currentPos += Vector3.new(0, vertical, 0) * delta  
				end  
			end  
 
			local currentCF = CFrame.lookAt(currentPos, currentPos + look)  
 
			local blockCast = workspace:Spherecast(currentPos + Vector3.new(0, 1, 0), 1, moveDir * 1.2, rayParams)  
 
			if not(blockCast) or LithiumUI.fly.Value then  
				currentCF = CFrame.lookAt(currentPos + moveDir, currentPos + moveDir + look)  
			else  
				local normal = -(blockCast.Position - (currentPos + Vector3.new(0, 1, 0))).Unit  
 
				local pos = blockCast.Position - Vector3.new(0, 1, 0) + normal * 1.1  
 
				currentCF = CFrame.lookAt(pos, pos + look)  
			end  
 
			Character.camTarget = currentCF * CFrame.new(0, 1.5, 0)  
 
			currentPos = currentCF.Position  
 
			if not(LithiumUI.fly.Value) then  
				currentCF *= CFrame.new(  
					0,  
					LithiumUI.cframeControllerPositionY.Value,  
					0  
				)  
				currentCF *= CFrame.Angles(  
					math.rad(LithiumUI.cframeControllerRotationX.Value),  
					math.rad(LithiumUI.cframeControllerRotationY.Value),  
					math.rad(LithiumUI.cframeControllerRotationZ.Value)  
				)  
			end  
 
			Character.camOffset = currentCF * CFrame.new(0, 1.5, 0)  
 
			local change = lastPos - currentPos  
			lastPos = currentPos  
 
			velocity.Parent = LithiumUI.fly.Value and Player.Character.Head or ReplicatedStorage  
			velocity.Velocity = change * -100  
 
			rotate.Parent = LithiumUI.fly.Value and Player.Character.Head or ReplicatedStorage  
			rotate.CFrame = CFrame.lookAt(currentPos, currentPos + Camera.CFrame.LookVector)  
 
			if not(LithiumUI.fly.Value) then  
				Player.Character.PrimaryPart.Velocity = Vector3.new()  
 
				Player.Character:PivotTo(currentCF)  
			end  
 
			table.clear(inputs)  
			inputs = nil  
			getKeys = nil  
			look = nil  
			right = nil  
			moveDir = nil  
			blockCast = nil  
			currentCF = nil  
		elseif lastWalkspeed then  
			Player.Character:PivotTo(CFrame.new(currentPos))  
			Player.Character.Humanoid.WalkSpeed = lastWalkspeed  
			Player.Character.Humanoid.PlatformStand = false  
 
			lastWalkspeed = nil  
		end  
 
		if not(waist) then  
			waist = Player.Character:FindFirstChild("Waist", true)  
		end  
 
		if LithiumUI.leanEnabled.Value then  
			if not(lastC0) then  
				lastC0 = waist.C0  
			end  
 
			waist.C0 = lastC0 * CFrame.Angles(math.rad(LithiumUI.lean.Value * 45), 0, 0)  
 
			if Remotes then  
				Remotes.UpdateTilt:FireServer(LithiumUI.lean.Value, nil, 0, 0)  
			end  
		elseif lastC0 then  
			waist.C0 = lastC0  
 
			lastC0 = nil  
		end  
 
		if LithiumUI.fallAnim.Value then  
			if not(undergroundAnim) then  
				undergroundAnim = Player.Character.Humanoid.Animator:LoadAnimation(undergroundAnimTrack)  
				undergroundAnim:Play()  
			end  
			 
			undergroundAnim.TimePosition = animTimeout 
		elseif undergroundAnim then  
			undergroundAnim:Stop()  
			undergroundAnim:Destroy()  
			undergroundAnim = nil  
		end  
 
		if Character.jumpPos and Character.jumpTarget then  
			Player.Character:PivotTo(CFrame.new(Character.jumpPos))  
			Camera.CFrame = CFrame.lookAt(Camera.CFrame.Position, Character.jumpTarget.Position)  
			Player.Character.PrimaryPart.AssemblyLinearVelocity = Vector3.new()  
			Player.Character.Humanoid.Sit = true  
		end  
	end  
end  
 
function Character:hookchar(character)  
	local Humanoid = character.Humanoid  
 
	local Connections = {  
		{'CharacterController', Humanoid.GetPropertyChangedSignal(Humanoid, 'WalkSpeed')},  
		{'CharacterController', Humanoid.GetPropertyChangedSignal(Humanoid, 'JumpHeight')},  
		{'CharacterController', Humanoid.GetPropertyChangedSignal(Humanoid, 'HipHeight')},  
		{'CharacterController', workspace.GetPropertyChangedSignal(workspace, 'Gravity')},  
		{'CharacterController', Humanoid.StateChanged},  
		{'CharacterController', character.HumanoidRootPart.ChildAdded},  
		{'CharacterController', character.HumanoidRootPart.ChildRemoved},  
		{'CharacterController', Humanoid.ChildAdded},  
		{'CharacterController', Humanoid.ChildRemoved},  
	}  
 
	for Index, Array in pairs(Connections) do  
		for _, Connection in pairs(getconnections(Array[2])) do  
			if type(Connection.Function) == 'function' then  
				local Info = debug.getinfo(Connection.Function)  
 
				if Info and string.find(Info.source, Array[1]) then  
					Connection:Disable()  
				end  
			end  
		end  
	end  
 
	Character.isHooked = true  
end  
 
return Character end
